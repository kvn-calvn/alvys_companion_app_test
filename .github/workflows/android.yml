name: Android Build

on:
  push:
    branches:
      - "qa"
      - "dev"
      - "main"
  pull_request:
    branches:
      - "qa"
      - "dev"
      - "main"
    types: [opened, synchronize]

env:
  FLUTTER_VERSION: "3.29.1"
  BUNDLETOOL_VERSION: "1.15.6"

jobs:
  build-android:
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/qa' ||
      github.ref == 'refs/heads/dev' ||
      github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "Branch name: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" == "dev" ]]; then
            echo "APP_ID=io.alvys.app.dev" >> $GITHUB_ENV
            echo "ENV=dev" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "qa" ]]; then
            echo "APP_ID=io.alvys.app.qa" >> $GITHUB_ENV
            echo "ENV=qa" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "main" ]]; then
            echo "APP_ID=io.alvys.app" >> $GITHUB_ENV
            echo "ENV=prod" >> $GITHUB_ENV
          fi
          echo "Set ENV to: ${{ env.ENV }}"

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Download .env file
        run: |
          echo '${{ secrets.ENV_FILE }}' | base64 --decode > .env

      - name: Download google-services.json
        run: |
          echo '${{ secrets.GOOGLE_SERVICES_JSON }}' | base64 --decode > android/app/google-services.json

      - name: Setup Android keystore
        run: |
          echo "${{ secrets.ALVYS_JKS }}" | base64 --decode > android/app/key.jks
          echo "storeFile=key.jks" > android/key.properties
          echo "${{ secrets.STORE_PASSWORD }}" | base64 -d > store_password.txt
          echo "storePassword=$(cat store_password.txt)" >> android/key.properties
          rm store_password.txt
          echo "${{ secrets.KEY_ALIAS }}" | base64 -d > key_alias.txt
          echo "keyAlias=$(cat key_alias.txt)" >> android/key.properties
          rm key_alias.txt
          echo "${{ secrets.KEY_PASSWORD }}" | base64 -d > key_password.txt
          echo "keyPassword=$(cat key_password.txt)" >> android/key.properties
          rm key_password.txt
          cat android/key.properties

      - name: Download Bundletool
        run: |
          curl -o bundletool.jar -L "https://github.com/google/bundletool/releases/download/${{ env.BUNDLETOOL_VERSION }}/bundletool-all-${{ env.BUNDLETOOL_VERSION }}.jar"
          chmod +x bundletool.jar
          ls

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"

      - name: Install dependencies & run build_runner
        run: |
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs

      - name: Build Android
        run: flutter build appbundle --flavor=${{ env.ENV }} --target=lib/${{ env.ENV }}.dart

      - name: Generate Universal APK
        run: |
          cd build/app/outputs/bundle/${{ env.ENV }}Release
          ls
          # Decode secrets
          echo "${{ secrets.STORE_PASSWORD }}" | base64 -d > store_password.txt
          echo "${{ secrets.KEY_ALIAS }}" | base64 -d > key_alias.txt
          echo "${{ secrets.KEY_PASSWORD }}" | base64 -d > key_password.txt

          java -jar ${{ github.workspace }}/bundletool.jar build-apks \
            --mode=universal \
            --bundle=app-${{ env.ENV }}-release.aab \
            --output=app-${{ env.ENV }}-release.apks \
            --ks=../../../../../android/app/key.jks \
            --ks-pass=pass:$(cat store_password.txt) \
            --ks-key-alias=$(cat key_alias.txt) \
            --key-pass=pass:$(cat key_password.txt)

          # Clean up secret files
          rm store_password.txt key_alias.txt key_password.txt

          unzip -p app-${{ env.ENV }}-release.apks universal.apk > app-${{ env.ENV }}-release-universal.apk

      - name: Upload AAB
        uses: actions/upload-artifact@v4
        with:
          name: aab
          path: build/app/outputs/bundle/${{ env.ENV }}Release/app-${{ env.ENV }}-release.aab

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: build/app/outputs/bundle/${{ env.ENV }}Release/app-${{ env.ENV }}-release-universal.apk

      - name: Upload to Firebase App Distribution
        if: github.ref == 'refs/heads/qa' || github.ref == 'refs/heads/dev'
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_CREDENTIALS }}
          groups: testers
          file: build/app/outputs/bundle/${{ env.ENV }}Release/app-${{ env.ENV }}-release-universal.apk
          releaseNotes: |
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Environment: ${{ env.ENV }}

      - name: Upload to Google Play
        if: github.ref == 'refs/heads/main'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
          packageName: ${{ env.APP_ID }}
          releaseFiles: build/app/outputs/bundle/${{ env.ENV }}Release/app-${{ env.ENV }}-release.aab
          track: production
          status: completed
          changesNotSentForReview: false

      - name: Upload to Google Play Internal Testing
        if: github.ref == 'refs/heads/qa'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
          packageName: ${{ env.APP_ID }}
          releaseFiles: build/app/outputs/bundle/${{ env.ENV }}Release/app-${{ env.ENV }}-release.aab
          track: internal
          status: completed
          changesNotSentForReview: false
